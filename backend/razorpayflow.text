Flow of Razorpay Integration:
1. User Clicks on Pay Now:
Frontend: When the user clicks the "Pay Now" button, a request is made to your backend (via the /api/payment/create-order API) to create a Razorpay order.

2. Backend Creates Razorpay Order:
Backend (paymentController.js): Your backend creates an order using Razorpay's API and sends back the orderId (Razorpay's order ID) to the frontend.

Backend Example:
const createRazorpayOrder = async (req, res) => {
    try {
        const { amount } = req.body;  // amount in rupees
        const options = {
            amount: amount * 100,      // Convert to paise
            currency: "INR",
            receipt: "receipt_" + Date.now()
        };
        const order = await razorpay.orders.create(options);
        res.status(200).json({ orderId: order.id, amount: order.amount });  // Send to frontend
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};

Frontend: After receiving the orderId from the backend, the frontend proceeds to create the Razorpay payment widget.
const { data } = await axios.post('/api/payment/create-order', { amount: 500 });
// Now data has { orderId: 'order_XYZ', amount: 50000 }

const options = {
    key: 'RAZORPAY_KEY_ID', // Your Razorpay key
    amount: data.amount,
    currency: "INR",
    order_id: data.orderId,  // From backend
    handler: function(response) {
        // This handler will be triggered when payment is successful
        const paymentData = {
            razorpayOrderId: data.orderId,
            razorpayPaymentId: response.razorpay_payment_id,
            razorpaySignature: response.razorpay_signature,
        };
        // Send payment data to backend for verification
        axios.post('/api/payment/verify-payment', paymentData);
    },
    prefill: {
        name: 'User Name',
        email: 'user@example.com',
        contact: '9999999999',
    }
};

// Open Razorpay payment widget
const razorpay = new Razorpay(options);
razorpay.open();
3. Razorpay Widget Handles Payment:
Razorpay Widget: When the user selects a payment method (e.g., Credit Card, UPI, etc.), the Razorpay widget will process the payment. If the payment is successful, it triggers the handler function.

Frontend: Razorpay will send a response to the handler function, which contains the razorpay_payment_id, razorpay_order_id, and razorpay_signature.

4. Verify Payment on Backend:
Frontend: The frontend sends the payment data (i.e., razorpayOrderId, razorpayPaymentId, razorpaySignature) to the backend to verify the payment.

Backend Verification (paymentController.js):

The backend uses the Razorpay razorpay_payment_id, razorpay_order_id, and razorpay_signature to verify the payment's authenticity.

It uses the razorpay SDK to verify the signature.

Backend Example:

js
Copy
Edit
const Razorpay = require('razorpay');
const crypto = require('crypto');

const razorpay = new Razorpay({
    key_id: process.env.RAZORPAY_KEY_ID,
    key_secret: process.env.RAZORPAY_SECRET,
});

const verifyPayment = (req, res) => {
    const { razorpayOrderId, razorpayPaymentId, razorpaySignature } = req.body;

    const body = razorpayOrderId + "|" + razorpayPaymentId;
    const expectedSignature = crypto
        .createHmac('sha256', process.env.RAZORPAY_SECRET)
        .update(body.toString())
        .digest('hex');

    if (expectedSignature === razorpaySignature) {
        // Payment verified successfully
        res.status(200).json({ message: 'Payment successful' });
    } else {
        // Verification failed
        res.status(400).json({ message: 'Payment verification failed' });
    }
};

module.exports = {
    verifyPayment
};
5. Payment Status Update:
If the payment is verified successfully on the backend, you can proceed with updating the order status, processing the payment, or any other logic you need.

If the verification fails, you can handle that error as well.

Complete Flow Recap:
User clicks on "Pay Now" â†’ Frontend calls /api/payment/create-order (Backend creates Razorpay order and sends back orderId).

Razorpay widget opens with the order details.

User selects a payment method in the Razorpay widget, and the payment is processed.

Razorpay sends the payment details (razorpay_payment_id, razorpay_order_id, razorpay_signature) to the frontend after payment.

Frontend sends payment details to the backend for verification.

Backend verifies the payment using Razorpay's API and the payment signature.

Final decision: If verified, update the order as "paid", else handle the failure.